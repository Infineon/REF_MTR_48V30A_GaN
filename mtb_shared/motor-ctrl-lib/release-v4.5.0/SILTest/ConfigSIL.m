%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Copyright 2021-2024, Cypress Semiconductor Corporation (an Infineon company) or
% an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
%
% This software, including source code, documentation and related
% materials ("Software") is owned by Cypress Semiconductor Corporation
% or one of its affiliates ("Cypress") and is protected by and subject to
% worldwide patent protection (United States and foreign),
% United States copyright laws and international treaty provisions.
% Therefore, you may use this Software only as provided in the license
% agreement accompanying the software package from which you
% obtained this Software ("EULA").
% If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
% non-transferable license to copy, modify, and compile the Software
% source code solely for use in connection with Cypress's
% integrated circuit products.  Any reproduction, modification, translation,
% compilation, or representation of this Software except as specified
% above is prohibited without the express written permission of Cypress.
%
% Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
% EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT, IMPLIED
% WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. Cypress
% reserves the right to make changes to the Software without notice. Cypress
% does not assume any liability arising out of the application or use of the
% Software or any product or circuit described in the Software. Cypress does
% not authorize its products for use in any products where a malfunction or
% failure of the Cypress product may reasonably be expected to result in
% significant property damage, injury or death ("High Risk Product"). By
% including Cypress's product in a High Risk Product, the manufacturer
% of such system or application assumes all risk of such use and in doing
% so agrees to indemnify Cypress against all liability.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Description: Configure and Compile Motor Control SIL

%% Prepare Environment
CleanWorkspace;
ctrl_method = 'RFO';

%% Generating Simulink Buses and MATLAB Structures
fprintf('%s\n','Importing C/C++ Data Types as Simulink Bus Types ...');
warning off;
import_result_ctrl = Simulink.importExternalCTypes('..\RegressionTests\SILWrapCtrl.h','Defines',['PC_TEST SIL_TEST CTRL_METHOD_',ctrl_method]);
import_result_inv = Simulink.importExternalCTypes('..\RegressionTests\SILWrapInv.h','Defines',['PC_TEST SIL_TEST CTRL_METHOD_',ctrl_method]);
import_result_motor = Simulink.importExternalCTypes('..\RegressionTests\SILWrapMotor.h','Defines',['PC_TEST SIL_TEST CTRL_METHOD_',ctrl_method]);
import_result_load = Simulink.importExternalCTypes('..\RegressionTests\SILWrapLoad.h','Defines',['PC_TEST SIL_TEST CTRL_METHOD_',ctrl_method]);
import_result_feedback = Simulink.importExternalCTypes('..\RegressionTests\SILWrapFeedback.h','Defines',['PC_TEST SIL_TEST CTRL_METHOD_',ctrl_method]);
warning on;
% C-specific parameter structure template (used in both c-code and MATLAB):
fprintf('\n%s\n','Creating MATLAB Parameter Structure Template from Simulink Bus Types ...');
p_template = Simulink.Bus.createMATLABStruct('PARAMS_t');

%% Generating SIL_GetDefaultParams S-Function
% Initialize
sil = legacy_code('initialize');
% Include paths
sil.IncPaths = {...
    '..\RegressionTests\',...
    '..\OperationalCode\',...
    };
% Source paths
sil.SrcPaths = {...
    '..\RegressionTests\',...
    '..\OperationalCode\',...
    };
% Header files
sil.HeaderFiles = {'SILWrapGetParams.h'};
% Source files
sil.SourceFiles = {...
    'General.c',...
    'Params.c',...
    'ParamsDefault.c',...
    'SILWrapGetParams.cpp',...
    };
% Define language
sil.Options.language = 'C++';
% Define s-function name
sil.SFunctionName = 'SIL_GetDefaultParams';
% Define s-function inputs and outputs
sil.InitializeConditionsFcnSpec = '';
sil.StartFcnSpec = '';
sil.TerminateFcnSpec = '';
sil.OutputFcnSpec = 'void SIL_GetDefaultParams(PARAMS_t y1[1])';
% Sample time
sil.SampleTime = 1.0; % Single sim step
% Generate simulink s-function block
fprintf('\n%s%s%s\n','Compiling ', sil.SFunctionName, ' into Simulink S-Block ...');
legacy_code('sfcn_cmex_generate', sil);
legacy_code('compile', sil, {'-DPC_TEST', '-DSIL_TEST', ['-DCTRL_METHOD_',ctrl_method]});
%legacy_code('generate_for_sim', sil);
%legacy_code('slblock_generate', sil);
% Run model
fprintf('\n%s%s%s\n','Running ', sil.SFunctionName, ' Model ...');

%% Setting Parameters
% Getting the default parameters from c-code
out = sim('Model_GetDefaultParams');
p_default = RemoveTimeSeries(out.simout); clear out; % Single precision from c-code
p = p_default;
% Overwrite parameters in MATLAB if necessary
Params

%% Generating SIL_RunCtrl S-Function
% Initialize
sil = legacy_code('initialize');
% Include paths
sil.IncPaths = {...
    '..\RegressionTests\',...
    '..\OperationalCode\',...
    };
% Source paths
sil.SrcPaths = {...
    '..\RegressionTests\',...
    '..\OperationalCode\',...
    };
% Header files
sil.HeaderFiles = {'SILWrapCtrl.h'};
% Source files
sil.SourceFiles = {...
    'Biquad.c',...
    'Controller.c',...
    'CtrlFilts.c',...
    'CtrlVars.c',...
    'FaultProtect.c',...
    'FcnExeHandler.c',...
    'FluxWeaken.c',...
    'General.c',...
    'HallSensor.c',...
    'HighFreqInj.c',...
    'MotorProfiler.c',...
    'Observer.c',...
    'Params.c',...
    'ParamsDefault.c',...
    'PLL.c',...
    'ResonantFilt.c',...
    'SensorIface.c',...
    'SixPulseInj.c',...
    'SpeedCtrl.c',...
    'StateMachine.c',...
    'TrapComm.c',...
    'Trq.c',...
    'VoltCtrl.c',...
    'VoltMod.c',...
    'AuxMethods.cpp',...
    'SILAuxFcns.cpp',...
    'SILWrapCtrl.cpp',...
    };
if strcmp(ctrl_method,'RFO')
    sil.SourceFiles = [sil.SourceFiles,{
        'CurrentCtrl.c',...
        'PhaseAdvance.c',...
        }];
elseif strcmp(ctrl_method,'SFO')
    sil.SourceFiles = [sil.SourceFiles,{
        'DeltaCtrl.c',...
        'FluxCtrl.c',...
        }];
elseif strcmp(ctrl_method,'TBC')
    sil.SourceFiles = [sil.SourceFiles,{
        'CurrentCtrl.c',...
        'BlockComm.c',...
        }];
else
    error('Set ctrl_method to either ''RFO'', ''SFO'', or ''TBC''!');
end
% Define language
sil.Options.language = 'C++';
% Define s-function name
sil.SFunctionName = 'SIL_RunCtrl';
% Define s-function inputs and outputs
sil.InitializeConditionsFcnSpec = '';
sil.StartFcnSpec = 'void SIL_StartCtrl(PARAMS_t p1[1])';
sil.TerminateFcnSpec = 'void SIL_TerminateCtrl()';
sil.OutputFcnSpec = 'void SIL_RunCtrl(SIL_INPUT_CTRL_t u1[1], SIL_OUTPUT_CTRL_t y1[1])';
% Sample time
sil.SampleTime = p.sys.samp.ts0;
% Generate simulink s-function block
fprintf('\n%s%s%s\n','Compiling ', sil.SFunctionName, ' into Simulink S-Block ...');
legacy_code('sfcn_cmex_generate', sil);
legacy_code('compile', sil, {'-DPC_TEST', '-DSIL_TEST', ['-DCTRL_METHOD_',ctrl_method]});
%legacy_code('generate_for_sim', sil);
%legacy_code('slblock_generate', sil);

%% Generating SIL_RunInv S-Function
% Initialize
sil = legacy_code('initialize');
% Include paths
sil.IncPaths = {...
    '..\RegressionTests\',...
    '..\OperationalCode\',...
    };
% Source paths
sil.SrcPaths = {...
    '..\RegressionTests\',...
    '..\OperationalCode\',...
    };
% Header files
sil.HeaderFiles = {'SILWrapInv.h'};
% Source files
sil.SourceFiles = {...
    'General.c',...
    'Params.c',...
    'ParamsDefault.c',...
    'CInverter.cpp',...
    'SILAuxFcns.cpp',...
    'SILWrapInv.cpp',...
    };
% Define language
sil.Options.language = 'C++';
% Define s-function name
sil.SFunctionName = 'SIL_RunInv';
% Define s-function inputs and outputs
sil.InitializeConditionsFcnSpec = '';
sil.StartFcnSpec = 'void SIL_StartInv(PARAMS_t p1[1])';
sil.TerminateFcnSpec = 'void SIL_TerminateInv()';
sil.OutputFcnSpec = 'void SIL_RunInv(SIL_INPUT_INV_t u1[1], SIL_OUTPUT_INV_t y1[1])';
% Sample time
sil.SampleTime = p.sys.samp.tsim;
% Generate simulink s-function block
fprintf('\n%s%s%s\n','Compiling ', sil.SFunctionName, ' into Simulink S-Block ...');
legacy_code('sfcn_cmex_generate', sil);
legacy_code('compile', sil, {'-DPC_TEST', '-DSIL_TEST', ['-DCTRL_METHOD_',ctrl_method]});
%legacy_code('generate_for_sim', sil);
%legacy_code('slblock_generate', sil);

%% Generating SIL_RunMotor S-Function
% Initialize
sil = legacy_code('initialize');
% Include paths
sil.IncPaths = {...
    '..\RegressionTests\',...
    '..\OperationalCode\',...
    };
% Source paths
sil.SrcPaths = {...
    '..\RegressionTests\',...
    '..\OperationalCode\',...
    };
% Header files
sil.HeaderFiles = {'SILWrapMotor.h'};
% Source files
sil.SourceFiles = {...
    'General.c',...
    'Params.c',...
    'ParamsDefault.c',...
    'CMotor.cpp',...
    'CPMSM.cpp',...
    'CBLDC.cpp',...
    'SILAuxFcns.cpp',...
    'AuxMethods.cpp',...
    'SILWrapMotor.cpp',...
    };
% Define language
sil.Options.language = 'C++';
% Define s-function name
sil.SFunctionName = 'SIL_RunMotor';
% Define s-function inputs and outputs
sil.InitializeConditionsFcnSpec = '';
sil.StartFcnSpec = 'void SIL_StartMotor(PARAMS_t p1[1])';
sil.TerminateFcnSpec = 'void SIL_TerminateMotor()';
sil.OutputFcnSpec = 'void SIL_RunMotor(SIL_INPUT_MOTOR_t u1[1], SIL_OUTPUT_MOTOR_t y1[1])';
% Sample time
sil.SampleTime = p.sys.samp.tsim;
% Generate simulink s-function block
fprintf('\n%s%s%s\n','Compiling ', sil.SFunctionName, ' into Simulink S-Block ...');
legacy_code('sfcn_cmex_generate', sil);
legacy_code('compile', sil, {'-DPC_TEST', '-DSIL_TEST', ['-DCTRL_METHOD_',ctrl_method]});
%legacy_code('generate_for_sim', sil);
%legacy_code('slblock_generate', sil);

%% Generating SIL_RunLoad S-Function
% Initialize
sil = legacy_code('initialize');
% Include paths
sil.IncPaths = {...
    '..\RegressionTests\',...
    '..\OperationalCode\',...
    };
% Source paths
sil.SrcPaths = {...
    '..\RegressionTests\',...
    '..\OperationalCode\',...
    };
% Header files
sil.HeaderFiles = {'SILWrapLoad.h'};
% Source files
sil.SourceFiles = {...
    'General.c',...
    'Params.c',...
    'ParamsDefault.c',...
    'CLoad.cpp',...
    'CMechLoad.cpp',...
    'CPotentiometer.cpp',...
    'CDyno.cpp',...
    'SILAuxFcns.cpp',...
    'AuxMethods.cpp',...
    'SILWrapLoad.cpp',...
    };
% Define language
sil.Options.language = 'C++';
% Define s-function name
sil.SFunctionName = 'SIL_RunLoad';
% Define s-function inputs and outputs
sil.InitializeConditionsFcnSpec = '';
sil.StartFcnSpec = 'void SIL_StartLoad(PARAMS_t p1[1])';
sil.TerminateFcnSpec = 'void SIL_TerminateLoad()';
sil.OutputFcnSpec = 'void SIL_RunLoad(SIL_INPUT_LOAD_t u1[1], SIL_OUTPUT_LOAD_t y1[1])';
% Sample time
sil.SampleTime = p.sys.samp.tsim;
% Generate simulink s-function block
fprintf('\n%s%s%s\n','Compiling ', sil.SFunctionName, ' into Simulink S-Block ...');
legacy_code('sfcn_cmex_generate', sil);
legacy_code('compile', sil, {'-DPC_TEST', '-DSIL_TEST', ['-DCTRL_METHOD_',ctrl_method]});
%legacy_code('generate_for_sim', sil);
%legacy_code('slblock_generate', sil);

%% Generating SIL_RunFeedback S-Function
% Initialize
sil = legacy_code('initialize');
% Include paths
sil.IncPaths = {...
    '..\RegressionTests\',...
    '..\OperationalCode\',...
    };
% Source paths
sil.SrcPaths = {...
    '..\RegressionTests\',...
    '..\OperationalCode\',...
    };
% Header files
sil.HeaderFiles = {'SILWrapFeedback.h'};
% Source files
sil.SourceFiles = {...
    'General.c',...
    'Params.c',...
    'ParamsDefault.c',...
    'CFeedback.cpp',...
    'CHallSensor.cpp',...
    'SILAuxFcns.cpp',...
    'AuxMethods.cpp',...
    'SILWrapFeedback.cpp',...
    };
% Define language
sil.Options.language = 'C++';
% Define s-function name
sil.SFunctionName = 'SIL_RunFeedback';
% Define s-function inputs and outputs
sil.InitializeConditionsFcnSpec = '';
sil.StartFcnSpec = 'void SIL_StartFeedback(PARAMS_t p1[1])';
sil.TerminateFcnSpec = 'void SIL_TerminateFeedback()';
sil.OutputFcnSpec = 'void SIL_RunFeedback(SIL_INPUT_FEEDBACK_t u1[1], SIL_OUTPUT_FEEDBACK_t y1[1])';
% Sample time
sil.SampleTime = p.sys.samp.tsim;
% Generate simulink s-function block
fprintf('\n%s%s%s\n','Compiling ', sil.SFunctionName, ' into Simulink S-Block ...');
legacy_code('sfcn_cmex_generate', sil);
legacy_code('compile', sil, {'-DPC_TEST', '-DSIL_TEST', ['-DCTRL_METHOD_',ctrl_method]});
%legacy_code('generate_for_sim', sil);
%legacy_code('slblock_generate', sil);

%% Open Simulink Model
open('Model_RunAll.slx')

