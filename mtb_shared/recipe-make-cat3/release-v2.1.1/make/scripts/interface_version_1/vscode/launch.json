{
    // Use IntelliSense to learn about possible attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
    //
    // NOTE for JLink users:
    //
    //    Ensure that Segger Sottware is preinstalled on PC
    //    Windows: Download latest version from: https://www.segger.com/downloads/jlink/JLink_Windows.exe
    //    Please create the following setting in your VSCode User Settings or in
    //    your global PATH.  Cortex-Debug needs to find the specific gdb-server
    //    you want to use.
    //
    //       Windows     : "cortex-debug.JLinkGDBServerPath": "<JLinkInstallDir>/JLinkGDBServerCL"
    //       Linux / Mac : "cortex-debug.JLinkGDBServerPath": "<JLinkInstallDir>/JLinkGDBServer"
    //
    //    User settings are located in:
    //
    //       Windows : %APPDATA%/Code/User/settings.json
    //       Mac     : $HOME/Library/Application Support/Code/User/settings.json
    //       Linux   : $HOME/.config/Code/User/settings.json
    //
    //    You can use the VSCode Settings UI to edit the files mentioned above.
    //
    //    For the JLink configurations in this file, the "device" name comes from
    //    the list found here:
    //       https://www.segger.com/downloads/supported-devices.php
    //
    "version": "0.2.0",
    "configurations": [
        {
            "name": "Launch (JLink)",
            "type": "cortex-debug",
            "request": "launch",
            "cwd": "${workspaceFolder}",
            "executable": "&&_MTB_RECIPE__ELF_FILE&&",
            "servertype": "jlink",
            "device": "&&DEVICE&&",
            "preLaunchCommands": [
                // Program via the hex file to get complete coverage
                "exec-file &&_MTB_RECIPE__HEX_FILE&&"
            ],
            "overrideRestartCommands": [
                "starti"
            ],
            // svdFile is optional, it can be very large.
            "svdFile": "&&_MTB_RECIPE__SVD_FILE_NAME&&",
            "breakAfterReset": true,
            "runToEntryPoint": "main",    // Specifies application entry point name where program will halt
            "preLaunchTask": "Build", // Set this to run a task from tasks.json before
                                                     // starting a debug session
            "showDevDebugOutput": "none" 
        },
        // When using 'attach', make sure your program is running on the board and that your
        // executable matches the image in the chip exactly, or else strange things can happen
        // with breakpoints, variables, etc.
        {
            "name": "Attach (JLink)",
            "type": "cortex-debug",
            "request": "attach",
            "cwd": "${workspaceFolder}",
            "executable": "&&_MTB_RECIPE__ELF_FILE&&",
            "servertype": "jlink",
            "device": "&&_MTB_RECIPE__DEVICE_ATTACH&&",
            "overrideRestartCommands": [
                "starti"
            ],
            // svdFile is optional, it can be very large.
            "svdFile": "&&_MTB_RECIPE__SVD_FILE_NAME&&",
            "breakAfterReset": true,
            "runToEntryPoint": "&&_MTB_RECIPE__APP_ENTRY_POINT&&",    // Specifies application entry point name for restart/reset
            "showDevDebugOutput": "none" 
        },
        {
            "name": "Erase (JLink)",
            "type": "cortex-debug",
            "request": "launch",
            "cwd": "${workspaceFolder}",
            // executable not needed but need some valid file to get the session to start
            "executable": "&&_MTB_RECIPE__ELF_FILE&&",
            "servertype": "jlink",
            "device": "&&DEVICE&&",
            "overrideLaunchCommands": [
                "monitor reset",      // Reset both core and the peripherals
                "monitor flash erase",
                "monitor reset"       // Reset both core and the peripherals
            ],
            "postStartSessionCommands": [
                "quit"
            ],
            "showDevDebugOutput": "none" 
        },
        {
            "name": "Program (JLink)",
            "type": "cortex-debug",
            "request": "launch",
            "cwd": "${workspaceFolder}",
            // Program via the hex file to get complete coverage, no need for symbols
            "executable": "&&_MTB_RECIPE__ELF_FILE&&",
            "servertype": "jlink",
            "device": "&&DEVICE&&",
            "preLaunchCommands": [
                // Program via the hex file to get complete coverage
                "exec-file &&_MTB_RECIPE__HEX_FILE&&"
            ],
            "overrideLaunchCommands": [
                "monitor reset",      // Reset both core and the peripherals
                "-target-download",
                "monitor reset",      // Reset both core and the peripherals
                "monitor go"
            ],
            "postStartSessionCommands": [
                "quit"
            ],
            "preLaunchTask": "Build",    // Set this to run a task from tasks.json
                                                        // before device programming
            "showDevDebugOutput": "none" 
        }
    ]
}
